{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Salon Booking Guru A salon client booking and management system. What is Salon Booking Guru? Salon Booking Guru is a management system to allow salon owners to insert, modify, and delete products which salon clients may book. Key features: Collect a deposit from clients for treatment to reduce cancellations Staff can enter their availability Clients may book treatments Clients get a reminder about their booking An automated self-service web front-end (mobile & tablet friendly) What is offered to users? The owner Create, modify, and delete products by category Create, modify, and delete staff Create, modify, and delete which staff members can perform treatments Create, modify, and delete availability periods The staff Update their own personal availability Notification of when their a slot in their availblility period has been booked The client Show available appointment times Pay a deposit Receive meaningful reminders of the appointment Method of cancellation","title":"Home"},{"location":"#salon-booking-guru","text":"A salon client booking and management system.","title":"Salon Booking Guru"},{"location":"#what-is-salon-booking-guru","text":"Salon Booking Guru is a management system to allow salon owners to insert, modify, and delete products which salon clients may book. Key features: Collect a deposit from clients for treatment to reduce cancellations Staff can enter their availability Clients may book treatments Clients get a reminder about their booking An automated self-service web front-end (mobile & tablet friendly)","title":"What is Salon Booking Guru?"},{"location":"#what-is-offered-to-users","text":"","title":"What is offered to users?"},{"location":"#the-owner","text":"Create, modify, and delete products by category Create, modify, and delete staff Create, modify, and delete which staff members can perform treatments Create, modify, and delete availability periods","title":"The owner"},{"location":"#the-staff","text":"Update their own personal availability Notification of when their a slot in their availblility period has been booked","title":"The staff"},{"location":"#the-client","text":"Show available appointment times Pay a deposit Receive meaningful reminders of the appointment Method of cancellation","title":"The client"},{"location":"CODE_OF_CONDUCT/","text":"Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community and platform Encourage helping each other learn (e.g. pair programming) from each others experience Showing empathy towards other community members and users Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community and platform Encourage helping each other learn (e.g. pair programming) from each others experience Showing empathy towards other community members and users Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing Main branch is always deployable To support continuous delivery the branch called main is always deployable. Issues are always created off of the main branch. Issue branches are always merged into the main branch. See Git Pull Request Process . Git Pull Request Process- every issue is a branch In short: Always create an issue first, get it's issue number and prefix your branch name with the issue number. See also Everything starts with an issue Question: I would like to ask for an explanation about git best practices. Like naming branches etc, I was in most cases working alone on projects so things like this were not important to me but now I need some guidance about these things. Answer: Contributions and changes must start with creating an issue, even if a tiny change. This gives you an issue number to use later on, the issue number is the branch name prefix. E.g. issue 123-<human-readable-name> this way, you always know which issue a branch relates to. How to create issue branches Locally: Checkout to main branch git checkout main (because you always want to branch of the most up to date code) Make sure your main branch is up to date. git fetch (this fetches all changes into the .git folder , but it does not change your files yet) git rebase origin/main (this does change your files and makes them up to date with main) and is safe to do- never rebase a shared branch you're collaborating on Create a new branch for the issue, using the number e.g. git checkout 376-add-edit-product (remember you're on the main branch , which is good because it contains the most up to date code because you fetched, then rebased) git checkout -b <issue-number>-name-of-issue do your coding , creating small commits which reference the issue e.g. if you updated template.html file git add <file> (or which ever files you've added/changed) git commit -m \"Fix #376 add edit product\" when you use the \"# \" in a commit message, GitHub automatically shows that commit on the GitHub issue. This is very useful for seeing the issue/code relationship. When you say git commit -m \"Fix #<issue number> my comment about the code , if the commit is merged into main, then it automatically close the issue (great time saver!) If you're finished , push the branch , but wait! Maybe the main branch has more changes since you wrote your code... you need to fetch and apply those first git fetch origin/main (fetches any changes which happened whilst you were working) git pull origin/main n (applies those changes to your current branch) notice we're using pull and not rebase in case we're collaborating with another person Now you're ready to push! Finally! git push origin 376-<issue-name> Never use force push if your working with others in the branch, it will destroy their work. If you're not 100% sure, don't ever use force push. It's rarely needed Go to GitHub and raise a pull request There is no need to delete the branch remotely because branches are copy on write (very tiny file size) but locally you might want to delete them if you have hundreds or don't want to see them anymore ( git branch -d <branch-name> ) It's normally unhelpful to delete a local branch 10mins after raising a pull request, because you might need to add things later on. You can always get the branch back, it takes seconds, but it's a hassle. Just keep the branch locally , it's not causing any problems, it's helping you because you might want to go back to it in a few weeks.","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#main-branch-is-always-deployable","text":"To support continuous delivery the branch called main is always deployable. Issues are always created off of the main branch. Issue branches are always merged into the main branch. See Git Pull Request Process .","title":"Main branch is always deployable"},{"location":"CONTRIBUTING/#git-pull-request-process-every-issue-is-a-branch","text":"In short: Always create an issue first, get it's issue number and prefix your branch name with the issue number. See also Everything starts with an issue Question: I would like to ask for an explanation about git best practices. Like naming branches etc, I was in most cases working alone on projects so things like this were not important to me but now I need some guidance about these things. Answer: Contributions and changes must start with creating an issue, even if a tiny change. This gives you an issue number to use later on, the issue number is the branch name prefix. E.g. issue 123-<human-readable-name> this way, you always know which issue a branch relates to.","title":"Git Pull Request Process- every issue is a branch"},{"location":"CONTRIBUTING/#how-to-create-issue-branches","text":"Locally: Checkout to main branch git checkout main (because you always want to branch of the most up to date code) Make sure your main branch is up to date. git fetch (this fetches all changes into the .git folder , but it does not change your files yet) git rebase origin/main (this does change your files and makes them up to date with main) and is safe to do- never rebase a shared branch you're collaborating on Create a new branch for the issue, using the number e.g. git checkout 376-add-edit-product (remember you're on the main branch , which is good because it contains the most up to date code because you fetched, then rebased) git checkout -b <issue-number>-name-of-issue do your coding , creating small commits which reference the issue e.g. if you updated template.html file git add <file> (or which ever files you've added/changed) git commit -m \"Fix #376 add edit product\" when you use the \"# \" in a commit message, GitHub automatically shows that commit on the GitHub issue. This is very useful for seeing the issue/code relationship. When you say git commit -m \"Fix #<issue number> my comment about the code , if the commit is merged into main, then it automatically close the issue (great time saver!) If you're finished , push the branch , but wait! Maybe the main branch has more changes since you wrote your code... you need to fetch and apply those first git fetch origin/main (fetches any changes which happened whilst you were working) git pull origin/main n (applies those changes to your current branch) notice we're using pull and not rebase in case we're collaborating with another person Now you're ready to push! Finally! git push origin 376-<issue-name> Never use force push if your working with others in the branch, it will destroy their work. If you're not 100% sure, don't ever use force push. It's rarely needed Go to GitHub and raise a pull request There is no need to delete the branch remotely because branches are copy on write (very tiny file size) but locally you might want to delete them if you have hundreds or don't want to see them anymore ( git branch -d <branch-name> ) It's normally unhelpful to delete a local branch 10mins after raising a pull request, because you might need to add things later on. You can always get the branch back, it takes seconds, but it's a hassle. Just keep the branch locally , it's not causing any problems, it's helping you because you might want to go back to it in a few weeks.","title":"How to create issue branches"},{"location":"DATABASE/","text":"Database Current entity relationship diagram Summary In the root of the repository there is a directory named uml/ , which contains a .uml file. This markdown is written in PlantUML and it should describe the most up to date version of the database schema required by the API. There is also a .png file, which is the resultant output of processing the .uml file. This image shows a visual representation of the database schema as a comprehensive entity relationship diagram from this you will be able to see all of the tables which are created and used by the API, and their relationship with other tables, as well as which fields each table contains. Modifying the ERD In the event that you modify the existing schema of the database by implementing a new migration in the API, you must ensure the ERD is synchronised accordingly. While the best place to look for advice on how to modify the .uml file to achieve a desired result is the official PlantUML documentation, the docs can oftentimes explain more than is necessary since the markdown itself is very flexible. Our current implementation only takes advantage of a couple of its features, and thus it is worthwhile briefly explaining in this document how we are currently using it. Each table is treated as an \"entity\", and is defined underneath the ** Entities ** comment in db-erd.uml , here is an example: entity \"account\" as account { *id : integer <<PK>> -- *role_id : integer <<FK>> *first_name : varchar *last_name : varchar *email : varchar(254) *password : varchar(64) *mobile_number : varchar() } This describes a table called account with a primary key (PK) called id , a single foreign key (FK) called role_id , and some additional fields. Take note of the fact each field is typed (e.g. varchar, integer, etc.), and labeled if the field represents a primary or foreign key. Underneath all of the entities, there is an ** Entity Relationships ** comment which describes the relationship between each of the entities (e.g. one-to-many) with another comment showing which characters represent different types of relational symbology: ' Zero or One: |o.. ' Exactly One: ||.. ' Zero or Many: }o.. ' One or Many: }|.. So to create a many-to-one relationship between two tables, let's call them account and role , you would write: account }o..|| role With this information alone, you should be able to help maintain and contribute to the ERD. How to generate a PNG from the UML First, ensure you have docker installed on your machine. Included in the uml/ directory is a script called plantuml.sh , this script consumes one argument, and it processes a .uml file into a .png file. To do this, first change into the uml/ directory: cd uml/ Then run the script and pass in the path to the file you would like to process: ./plantuml.sh db-erd.uml You should expect to see a new .png file in the uml/ directory if there wasn't one already.","title":"Database"},{"location":"DATABASE/#database","text":"","title":"Database"},{"location":"DATABASE/#current-entity-relationship-diagram","text":"","title":"Current entity relationship diagram"},{"location":"DATABASE/#summary","text":"In the root of the repository there is a directory named uml/ , which contains a .uml file. This markdown is written in PlantUML and it should describe the most up to date version of the database schema required by the API. There is also a .png file, which is the resultant output of processing the .uml file. This image shows a visual representation of the database schema as a comprehensive entity relationship diagram from this you will be able to see all of the tables which are created and used by the API, and their relationship with other tables, as well as which fields each table contains.","title":"Summary"},{"location":"DATABASE/#modifying-the-erd","text":"In the event that you modify the existing schema of the database by implementing a new migration in the API, you must ensure the ERD is synchronised accordingly. While the best place to look for advice on how to modify the .uml file to achieve a desired result is the official PlantUML documentation, the docs can oftentimes explain more than is necessary since the markdown itself is very flexible. Our current implementation only takes advantage of a couple of its features, and thus it is worthwhile briefly explaining in this document how we are currently using it. Each table is treated as an \"entity\", and is defined underneath the ** Entities ** comment in db-erd.uml , here is an example: entity \"account\" as account { *id : integer <<PK>> -- *role_id : integer <<FK>> *first_name : varchar *last_name : varchar *email : varchar(254) *password : varchar(64) *mobile_number : varchar() } This describes a table called account with a primary key (PK) called id , a single foreign key (FK) called role_id , and some additional fields. Take note of the fact each field is typed (e.g. varchar, integer, etc.), and labeled if the field represents a primary or foreign key. Underneath all of the entities, there is an ** Entity Relationships ** comment which describes the relationship between each of the entities (e.g. one-to-many) with another comment showing which characters represent different types of relational symbology: ' Zero or One: |o.. ' Exactly One: ||.. ' Zero or Many: }o.. ' One or Many: }|.. So to create a many-to-one relationship between two tables, let's call them account and role , you would write: account }o..|| role With this information alone, you should be able to help maintain and contribute to the ERD.","title":"Modifying the ERD"},{"location":"DATABASE/#how-to-generate-a-png-from-the-uml","text":"First, ensure you have docker installed on your machine. Included in the uml/ directory is a script called plantuml.sh , this script consumes one argument, and it processes a .uml file into a .png file. To do this, first change into the uml/ directory: cd uml/ Then run the script and pass in the path to the file you would like to process: ./plantuml.sh db-erd.uml You should expect to see a new .png file in the uml/ directory if there wasn't one already.","title":"How to generate a PNG from the UML"},{"location":"QUICK_START_GUIDE/","text":"Quick-start guide This guide will help you quickly configure and launch an instance of the Salon Booking Guru with the intent of developing on the codebase. Database Set-up To allow the API to have persistent data storage, you must first have a PostgreSQL database running, we have provided a script in to start a PostgreSQL instance using docker: postgres/run.sh Database logs docker logs -f postgres Note: This database configuration should only ever be used for the purpose of local development, since all credentials are stored in this public repository. API Set-up Now you have a PostgreSQL database up and running on your local machine, you will be able to run the API. In the future we will achieve this by using Docker, however for now, you must build the API yourself using golang's compiler. First ensure you have Golang installed and configured, then change into the api/ directory: cd api/ Then use the run.sh script to install all dependencies, build a binary, and run the binary: ./run.sh For this to work, it is likely that this repository will need to exist in the correct location of your GOPATH, you directory structure should look something like this on a UNIX environment: ~/go/src/github.com/KarmaComputing/salon-booking-guru/ For more information on how the GOPATH works, check out this article by Digital Ocean . Note: The environment variables set in api/run.sh match those of the postgres docker container started by postgres/run.sh . Front-end Set-up Similarly to the API, we will eventually use docker to start an instance of the front-end, however in the meantime you must use yarn . First ensure you have Yarn installed. Then change into the front-end/ directory: cd front-end/ Then install all dependencies using: yarn You will then be able to start the front-end server using: yarn serve","title":"Quick-Start Guide"},{"location":"QUICK_START_GUIDE/#quick-start-guide","text":"This guide will help you quickly configure and launch an instance of the Salon Booking Guru with the intent of developing on the codebase.","title":"Quick-start guide"},{"location":"QUICK_START_GUIDE/#database-set-up","text":"To allow the API to have persistent data storage, you must first have a PostgreSQL database running, we have provided a script in to start a PostgreSQL instance using docker: postgres/run.sh","title":"Database Set-up"},{"location":"QUICK_START_GUIDE/#database-logs","text":"docker logs -f postgres Note: This database configuration should only ever be used for the purpose of local development, since all credentials are stored in this public repository.","title":"Database logs"},{"location":"QUICK_START_GUIDE/#api-set-up","text":"Now you have a PostgreSQL database up and running on your local machine, you will be able to run the API. In the future we will achieve this by using Docker, however for now, you must build the API yourself using golang's compiler. First ensure you have Golang installed and configured, then change into the api/ directory: cd api/ Then use the run.sh script to install all dependencies, build a binary, and run the binary: ./run.sh For this to work, it is likely that this repository will need to exist in the correct location of your GOPATH, you directory structure should look something like this on a UNIX environment: ~/go/src/github.com/KarmaComputing/salon-booking-guru/ For more information on how the GOPATH works, check out this article by Digital Ocean . Note: The environment variables set in api/run.sh match those of the postgres docker container started by postgres/run.sh .","title":"API Set-up"},{"location":"QUICK_START_GUIDE/#front-end-set-up","text":"Similarly to the API, we will eventually use docker to start an instance of the front-end, however in the meantime you must use yarn . First ensure you have Yarn installed. Then change into the front-end/ directory: cd front-end/ Then install all dependencies using: yarn You will then be able to start the front-end server using: yarn serve","title":"Front-end Set-up"},{"location":"WIREFRAMES/","text":"Wireframes All wireframes are currently built using draw.io , to open the .xml files in wireframes/ simply go to https://app.diagrams.net/ and open the files using their GUI. Alternatively use your favorite image viewer to open any of the .png files. Making a booking Salon users","title":"Wireframes"},{"location":"WIREFRAMES/#wireframes","text":"All wireframes are currently built using draw.io , to open the .xml files in wireframes/ simply go to https://app.diagrams.net/ and open the files using their GUI. Alternatively use your favorite image viewer to open any of the .png files.","title":"Wireframes"},{"location":"WIREFRAMES/#making-a-booking","text":"","title":"Making a booking"},{"location":"WIREFRAMES/#salon-users","text":"","title":"Salon users"},{"location":"deployment/","text":"Deployment Automatic deployment using Dokku and GitHub Actions Deploy a Dokku server Requirements: Ubuntu 20.04 LTS Dokku v0.24.10 A domain name with a DNS A record pointing to your dokku server (optional) Dokku Installation Create dokku swap on small VPS (optional) For small (cheap) VPS's Dokku will run out of RAM quickly. Create a 5GB swap is one way to mitigate this. sudo fallocate -l 5g /mnt/5GiB.swap sudo chmod 600 /mnt/5GiB.swap sudo mkswap /mnt/5GiB.swap sudo swapon /mnt/5GiB.swap echo '/mnt/5GiB.swap swap swap defaults 0 0' | sudo tee -a /etc/fstab free -mh On the VPS install Dokku: wget https://raw.githubusercontent.com/dokku/dokku/v0.24.10/bootstrap.sh; sudo DOKKU_TAG=v0.24.10 bash bootstrap.sh # This process may take over 10 minutes Visit in you web browser to complete install Visit http://<your-server-ip> , and complete installation. Be sure to click 'Use virtualhost naming for apps: After you click 'Finish' you'll be redirected to Dokku documentation- you can close that for now, but do read it. Dokku configuration Setup domain (optional) If dokku was able to resolve the hostname during install then the dokku domain will have already been added check with: su dokku dokku domains:report --global =====> Global domains information Domains global enabled: true Domains global vhosts: domain.example.com If not, check your DNS A record is correctly pointing to your server, then configure dokku manually: su dokku dokku domains:add-global <your-domain> Create database, api, & front-end apps in Dokku Database sudo -iu dokku dokku apps:create salon-booking-guru-database dokku git:initialize salon-booking-guru-database dokku git:set salon-booking-guru-database deploy-branch main; dokku docker-options:add salon-booking-guru-database build --file=/home/dokku/salon-booking-guru-database/Dockerfile; API sudo -iu dokku dokku apps:create salon-booking-guru-api dokku git:initialize salon-booking-guru-api dokku git:set salon-booking-guru-api deploy-branch main; dokku docker-options:add salon-booking-guru-api build --file=/home/dokku/salon-booking-guru-api/Dockerfile; Front-end sudo -iu dokku dokku apps:create salon-booking-guru-front-end dokku git:initialize salon-booking-guru-front-end dokku git:set salon-booking-guru-front-end deploy-branch main; dokku docker-options:add salon-booking-guru-front-end build --file=/home/dokku/salon-booking-guru-front-end/Dockerfile; Create shared network This is so the api and database may connect to eachother. dokku network:create sharednetwork Attach database and api to the sharednetwork , note that the front-end does not need to be connected to the sharednetwork . dokku network:set salon-booking-guru-database attach-post-create sharednetwork dokku network:set salon-booking-guru-api attach-post-create sharednetwork Set database credentials Database credentials get injected into the apps envrionment upon startup. See 12factor app - config . dokku config:set salon-booking-guru-api SALON_BOOKING_GURU_DB_HOST=salon-booking-guru-database.web SALON_BOOKING_GURU_DB_PORT=5432 SALON_BOOKING_GURU_DB_PASSWORD=\"changeme\" SALON_BOOKING_GURU_DB_DBNAME=\"salon_booking_guru\" SALON_BOOKING_GURU_DB_USER=\"postgres\" ... -----> Setting config vars SALON_BOOKING_GURU_DB_DBNAME: salon_booking_guru SALON_BOOKING_GURU_DB_HOST: salon-booking-guru-database.web SALON_BOOKING_GURU_DB_PASSWORD: changeme SALON_BOOKING_GURU_DB_PORT: 5432 SALON_BOOKING_GURU_DB_USER: postgres -----> Restarting app salon-booking-guru-api -----> Releasing salon-booking-guru-api... ... -----> Shutting down old containers in 60 seconds =====> Application deployed: http://salon-booking-guru-api.dokku.karmacomputing.co.uk http://salon-booking-guru-api.dokku.karmacomputing.co.uk:8085 https://salon-booking-guru-api.dokku.karmacomputing.co.uk Dockerfile configuration For dokku v0.24.10 Dockerfile deployment is only recognised when there is a Dockerfile in the root directory of the repository. However this repo has components in subdirectories: In an upcomping release of Dokku mono repos will be supported. To workaround this that there is an empty Dockerfile in the root. This forces dokku to treat the apps as docker deployments (Dokku supports multiple deployment types). Additionally, the git hook(s) need to be altered for each app Configure Dokku git pre-recieve hook to build correct Dockerfile This is needed since when docku builds containers the build context is hardcoded to the root of the repo. Add a pre-recieve hook on the dokku server to fetch the Dockerfile into the repo: Database vi salon-booking-guru-database/hooks/pre-receive #!/usr/bin/env bash set -e set -o pipefail curl https://raw.githubusercontent.com/KarmaComputing/salon-booking-guru/main/database/Dockerfile > /home/dokku/salon-booking-guru-database/Dockerfile cat | DOKKU_ROOT=\"/home/dokku\" dokku git-hook salon-booking-guru-database API vi salon-booking-guru-api/hooks/pre-receive #!/usr/bin/env bash set -e set -o pipefail curl https://raw.githubusercontent.com/KarmaComputing/salon-booking-guru/main/api/Dockerfile > /home/dokku/salon-booking-guru-api/Dockerfile cat | DOKKU_ROOT=\"/home/dokku\" dokku git-hook salon-booking-guru-api Front-end vi salon-booking-guru-front-end/hooks/pre-receive #!/usr/bin/env bash set -e set -o pipefail curl https://raw.githubusercontent.com/KarmaComputing/salon-booking-guru/main/front-end/Dockerfile > /home/dokku/salon-booking-guru-front-end/Dockerfile cat | DOKKU_ROOT=\"/home/dokku\" dokku git-hook salon-booking-guru-front-end Verify dokku apps with git push To make sure everything is in order, you can manually push to Dokku from your local The steps are to: Add a git remote for each component (database, api, front-end) Perform a git push Observe the containers running Git add remotes On your local machine . DOKKU_IP=<dokku-ip> # change to your ip address git remote add dokku-database dokku@$DOKKU_IP:salon-booking-guru-database git remote add dokku-api dokku@$DOKKU_IP:salon-booking-guru-api git remote add dokku-front-end dokku@$DOKKU_IP:salon-booking-guru-front-end You can verify remotes with git remote -v show Deploy initial apps From your local machine, star the deployment of the database . api and front-end apps. Deploy database You will see dokku deploy the database git push dokku-database main Enumerating objects: 594, done. -----> Cleaning up... -----> Building salon-booking-guru-database from Dockerfile remote: dos2unix: converting file Dockerfile to Unix format... remote: build context to Docker daemon 1.77MB Step 1/6 : FROM postgres:13.3-alpine ... =====> Application deployed: http://salon-booking-guru-database.dokku.karmacomputing.co.uk http://salon-booking-guru-database.dokku.karmacomputing.co.uk:5432 To <ip>:salon-booking-guru-database * [new branch] main -> main Deploy API git push dokku-api Enumerating objects: 594, done. Counting objects: 100% (594/594), done. ... -----> Renaming containers Renaming container (04b1f4740169) youthful_cori to salon-booking-guru-api.web.1 -----> Checking for postdeploy task No postdeploy task found, skipping =====> Application deployed: http://salon-booking-guru-api.dokku.karmacomputing.co.uk http://salon-booking-guru-api.dokku.karmacomputing.co.uk:8085 Deploy front-end Note front-end build may take over 5 minutes to build git push dokku-front-end ... -----> Checking for postdeploy task No postdeploy task found, skipping =====> Application deployed: http://salon-booking-guru-front-end.dokku.karmacomputing.co.uk Verify front-end app loading: http://salon-booking-guru-front-end.dokku.karmacomputing.co.uk/ Automatic Let's Encrypt TLS Certificate Via dokku-letsencrypt Install Let's Encrypt plugin # as root on dokku sudo dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git Setup automatic certs for api and frontend Must use a valid email address sudo -iu dokku dokku config:set --global DOKKU_LETSENCRYPT_EMAIL=your@email.tld Certificate generation # API dokku letsencrypt:enable salon-booking-guru-front-end # Front-end dokku proxy:ports-add salon-booking-guru-api http:80:8085 dokku letsencrypt:enable salon-booking-guru-api dokku proxy:ports-add salon-booking-guru-api https:443:8085 Troubleshooting Dokku apps command not found Check ~/.ssh/authorized keys / root to ensure the ssh command includes command=\"`cat /home/dokku/.sshcommand` $SSH_ORIGINAL_COMMAND\" ssh-rsa <the key> How do I know the database is connected OK See healthcheck endpoint . Tail the logs of the app, and observe Connection to the database established . dokku@dokku:~$ dokku logs -t salon-booking-guru-api 2021-08-01T20:48:32.183932807Z app[web.1]: 2021/08/01 20:48:32 Listening on :8085 2021-08-01T20:48:32.521738711Z app[web.1]: 2021/08/01 20:48:32 Connection to the database established How to force a rebuild/reload of an app Example rebuilding the database and api see Dokku rebuilding apps dokku ps:rebuild salon-booking-guru-database dokku ps:rebuild salon-booking-guru-api Access denied when pushing from local It's possible your ssh key is not configued with dokku. Either use ssk-copy-id or: cat ~/.ssh/id_rsa.pub | ssh root@<your-vps-ip-address> dokku ssh-keys:add mylocal Docker options not set / building wrong Dockerfile Check the docker-options. dokku docker-options:report salon-booking-guru-front-end If you need to reset them: take a copy of all existing settings dokku docker-options:report salon-booking-guru-front-end Clear the options dokku docker-options:clear Add the settings back you want for each stage e.g. dokku docker-options:add salon-booking-guru-front-end deploy --restart=on-failure:10 If you get the following error: remote: unable to prepare context: unable to evaluate symlinks in Dockerfile path: lstat /home/dokku/salon-booking-guru/api: no such file or directory . This means that the Dockerfile is not already on the Dokku servers repository, make sure that its already there and check the pre-recieve hook so that it has the correct URL to the Dockerfile. It must start with raw.githubusercontent.com . Github Actions setup Credentials The Github Dokku action needs to be able to ssh into the Dokku server. On the dokku server, generate a keypaid for Github to use; su dokku ssh-keygen # Press enter, generate key without passphrase Allow the key to be used by Github cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys Copy the private key to Gituub secrets e.g. https://github.com/<org>/<repo>/settings/secrets/actions as SSH_PRIVATE_KEY . cat ~/.ssh/id_rsa # Copy into GitHub secrets as SSH_PRIVATE_KEY Also set DOKKU_HOST to the ip address or hostname of your dokku server. Hardening Disable Password based authentication Verify your ssh access working with key based access ( ssh root@<your-ip> ) # login without a password Disable ssh password based authentication Open /etc/ssh/sshd_config Change the line #PasswordAuthentication yes to PasswordAuthentication no","title":"Deploy"},{"location":"deployment/#deployment","text":"Automatic deployment using Dokku and GitHub Actions","title":"Deployment"},{"location":"deployment/#deploy-a-dokku-server","text":"Requirements: Ubuntu 20.04 LTS Dokku v0.24.10 A domain name with a DNS A record pointing to your dokku server (optional)","title":"Deploy a Dokku server"},{"location":"deployment/#dokku-installation","text":"","title":"Dokku Installation"},{"location":"deployment/#create-dokku-swap-on-small-vps-optional","text":"For small (cheap) VPS's Dokku will run out of RAM quickly. Create a 5GB swap is one way to mitigate this. sudo fallocate -l 5g /mnt/5GiB.swap sudo chmod 600 /mnt/5GiB.swap sudo mkswap /mnt/5GiB.swap sudo swapon /mnt/5GiB.swap echo '/mnt/5GiB.swap swap swap defaults 0 0' | sudo tee -a /etc/fstab free -mh","title":"Create dokku swap on small VPS (optional)"},{"location":"deployment/#on-the-vps-install-dokku","text":"wget https://raw.githubusercontent.com/dokku/dokku/v0.24.10/bootstrap.sh; sudo DOKKU_TAG=v0.24.10 bash bootstrap.sh # This process may take over 10 minutes","title":"On the VPS install Dokku:"},{"location":"deployment/#visit-in-you-web-browser-to-complete-install","text":"Visit http://<your-server-ip> , and complete installation. Be sure to click 'Use virtualhost naming for apps: After you click 'Finish' you'll be redirected to Dokku documentation- you can close that for now, but do read it.","title":"Visit in you web browser to complete install"},{"location":"deployment/#dokku-configuration","text":"Setup domain (optional) If dokku was able to resolve the hostname during install then the dokku domain will have already been added check with: su dokku dokku domains:report --global =====> Global domains information Domains global enabled: true Domains global vhosts: domain.example.com If not, check your DNS A record is correctly pointing to your server, then configure dokku manually: su dokku dokku domains:add-global <your-domain>","title":"Dokku configuration"},{"location":"deployment/#create-database-api-front-end-apps-in-dokku","text":"","title":"Create database, api, &amp; front-end apps in Dokku"},{"location":"deployment/#database","text":"sudo -iu dokku dokku apps:create salon-booking-guru-database dokku git:initialize salon-booking-guru-database dokku git:set salon-booking-guru-database deploy-branch main; dokku docker-options:add salon-booking-guru-database build --file=/home/dokku/salon-booking-guru-database/Dockerfile;","title":"Database"},{"location":"deployment/#api","text":"sudo -iu dokku dokku apps:create salon-booking-guru-api dokku git:initialize salon-booking-guru-api dokku git:set salon-booking-guru-api deploy-branch main; dokku docker-options:add salon-booking-guru-api build --file=/home/dokku/salon-booking-guru-api/Dockerfile;","title":"API"},{"location":"deployment/#front-end","text":"sudo -iu dokku dokku apps:create salon-booking-guru-front-end dokku git:initialize salon-booking-guru-front-end dokku git:set salon-booking-guru-front-end deploy-branch main; dokku docker-options:add salon-booking-guru-front-end build --file=/home/dokku/salon-booking-guru-front-end/Dockerfile;","title":"Front-end"},{"location":"deployment/#create-shared-network","text":"This is so the api and database may connect to eachother. dokku network:create sharednetwork Attach database and api to the sharednetwork , note that the front-end does not need to be connected to the sharednetwork . dokku network:set salon-booking-guru-database attach-post-create sharednetwork dokku network:set salon-booking-guru-api attach-post-create sharednetwork","title":"Create shared network"},{"location":"deployment/#set-database-credentials","text":"Database credentials get injected into the apps envrionment upon startup. See 12factor app - config . dokku config:set salon-booking-guru-api SALON_BOOKING_GURU_DB_HOST=salon-booking-guru-database.web SALON_BOOKING_GURU_DB_PORT=5432 SALON_BOOKING_GURU_DB_PASSWORD=\"changeme\" SALON_BOOKING_GURU_DB_DBNAME=\"salon_booking_guru\" SALON_BOOKING_GURU_DB_USER=\"postgres\" ... -----> Setting config vars SALON_BOOKING_GURU_DB_DBNAME: salon_booking_guru SALON_BOOKING_GURU_DB_HOST: salon-booking-guru-database.web SALON_BOOKING_GURU_DB_PASSWORD: changeme SALON_BOOKING_GURU_DB_PORT: 5432 SALON_BOOKING_GURU_DB_USER: postgres -----> Restarting app salon-booking-guru-api -----> Releasing salon-booking-guru-api... ... -----> Shutting down old containers in 60 seconds =====> Application deployed: http://salon-booking-guru-api.dokku.karmacomputing.co.uk http://salon-booking-guru-api.dokku.karmacomputing.co.uk:8085 https://salon-booking-guru-api.dokku.karmacomputing.co.uk","title":"Set database credentials"},{"location":"deployment/#dockerfile-configuration","text":"For dokku v0.24.10 Dockerfile deployment is only recognised when there is a Dockerfile in the root directory of the repository. However this repo has components in subdirectories: In an upcomping release of Dokku mono repos will be supported. To workaround this that there is an empty Dockerfile in the root. This forces dokku to treat the apps as docker deployments (Dokku supports multiple deployment types). Additionally, the git hook(s) need to be altered for each app","title":"Dockerfile configuration"},{"location":"deployment/#configure-dokku-git-pre-recieve-hook-to-build-correct-dockerfile","text":"This is needed since when docku builds containers the build context is hardcoded to the root of the repo. Add a pre-recieve hook on the dokku server to fetch the Dockerfile into the repo:","title":"Configure Dokku git pre-recieve hook to build correct Dockerfile"},{"location":"deployment/#database_1","text":"vi salon-booking-guru-database/hooks/pre-receive #!/usr/bin/env bash set -e set -o pipefail curl https://raw.githubusercontent.com/KarmaComputing/salon-booking-guru/main/database/Dockerfile > /home/dokku/salon-booking-guru-database/Dockerfile cat | DOKKU_ROOT=\"/home/dokku\" dokku git-hook salon-booking-guru-database","title":"Database"},{"location":"deployment/#api_1","text":"vi salon-booking-guru-api/hooks/pre-receive #!/usr/bin/env bash set -e set -o pipefail curl https://raw.githubusercontent.com/KarmaComputing/salon-booking-guru/main/api/Dockerfile > /home/dokku/salon-booking-guru-api/Dockerfile cat | DOKKU_ROOT=\"/home/dokku\" dokku git-hook salon-booking-guru-api","title":"API"},{"location":"deployment/#front-end_1","text":"vi salon-booking-guru-front-end/hooks/pre-receive #!/usr/bin/env bash set -e set -o pipefail curl https://raw.githubusercontent.com/KarmaComputing/salon-booking-guru/main/front-end/Dockerfile > /home/dokku/salon-booking-guru-front-end/Dockerfile cat | DOKKU_ROOT=\"/home/dokku\" dokku git-hook salon-booking-guru-front-end","title":"Front-end"},{"location":"deployment/#verify-dokku-apps-with-git-push","text":"To make sure everything is in order, you can manually push to Dokku from your local The steps are to: Add a git remote for each component (database, api, front-end) Perform a git push Observe the containers running","title":"Verify dokku apps with git push"},{"location":"deployment/#git-add-remotes","text":"On your local machine . DOKKU_IP=<dokku-ip> # change to your ip address git remote add dokku-database dokku@$DOKKU_IP:salon-booking-guru-database git remote add dokku-api dokku@$DOKKU_IP:salon-booking-guru-api git remote add dokku-front-end dokku@$DOKKU_IP:salon-booking-guru-front-end You can verify remotes with git remote -v show","title":"Git add remotes"},{"location":"deployment/#deploy-initial-apps","text":"From your local machine, star the deployment of the database . api and front-end apps.","title":"Deploy initial apps"},{"location":"deployment/#deploy-database","text":"You will see dokku deploy the database git push dokku-database main Enumerating objects: 594, done. -----> Cleaning up... -----> Building salon-booking-guru-database from Dockerfile remote: dos2unix: converting file Dockerfile to Unix format... remote: build context to Docker daemon 1.77MB Step 1/6 : FROM postgres:13.3-alpine ... =====> Application deployed: http://salon-booking-guru-database.dokku.karmacomputing.co.uk http://salon-booking-guru-database.dokku.karmacomputing.co.uk:5432 To <ip>:salon-booking-guru-database * [new branch] main -> main","title":"Deploy database"},{"location":"deployment/#deploy-api","text":"git push dokku-api Enumerating objects: 594, done. Counting objects: 100% (594/594), done. ... -----> Renaming containers Renaming container (04b1f4740169) youthful_cori to salon-booking-guru-api.web.1 -----> Checking for postdeploy task No postdeploy task found, skipping =====> Application deployed: http://salon-booking-guru-api.dokku.karmacomputing.co.uk http://salon-booking-guru-api.dokku.karmacomputing.co.uk:8085","title":"Deploy API"},{"location":"deployment/#deploy-front-end","text":"Note front-end build may take over 5 minutes to build git push dokku-front-end ... -----> Checking for postdeploy task No postdeploy task found, skipping =====> Application deployed: http://salon-booking-guru-front-end.dokku.karmacomputing.co.uk Verify front-end app loading: http://salon-booking-guru-front-end.dokku.karmacomputing.co.uk/","title":"Deploy front-end"},{"location":"deployment/#automatic-lets-encrypt-tls-certificate","text":"Via dokku-letsencrypt","title":"Automatic Let's Encrypt TLS Certificate"},{"location":"deployment/#install-lets-encrypt-plugin","text":"# as root on dokku sudo dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git","title":"Install Let's Encrypt plugin"},{"location":"deployment/#setup-automatic-certs-for-api-and-frontend","text":"Must use a valid email address sudo -iu dokku dokku config:set --global DOKKU_LETSENCRYPT_EMAIL=your@email.tld","title":"Setup automatic certs for api and frontend"},{"location":"deployment/#certificate-generation","text":"# API dokku letsencrypt:enable salon-booking-guru-front-end # Front-end dokku proxy:ports-add salon-booking-guru-api http:80:8085 dokku letsencrypt:enable salon-booking-guru-api dokku proxy:ports-add salon-booking-guru-api https:443:8085","title":"Certificate generation"},{"location":"deployment/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"deployment/#dokku-apps-command-not-found","text":"Check ~/.ssh/authorized keys / root to ensure the ssh command includes command=\"`cat /home/dokku/.sshcommand` $SSH_ORIGINAL_COMMAND\" ssh-rsa <the key>","title":"Dokku apps command not found"},{"location":"deployment/#how-do-i-know-the-database-is-connected-ok","text":"See healthcheck endpoint . Tail the logs of the app, and observe Connection to the database established . dokku@dokku:~$ dokku logs -t salon-booking-guru-api 2021-08-01T20:48:32.183932807Z app[web.1]: 2021/08/01 20:48:32 Listening on :8085 2021-08-01T20:48:32.521738711Z app[web.1]: 2021/08/01 20:48:32 Connection to the database established","title":"How do I know the database is connected OK"},{"location":"deployment/#how-to-force-a-rebuildreload-of-an-app","text":"Example rebuilding the database and api see Dokku rebuilding apps dokku ps:rebuild salon-booking-guru-database dokku ps:rebuild salon-booking-guru-api","title":"How to force a rebuild/reload of an app"},{"location":"deployment/#access-denied-when-pushing-from-local","text":"It's possible your ssh key is not configued with dokku. Either use ssk-copy-id or: cat ~/.ssh/id_rsa.pub | ssh root@<your-vps-ip-address> dokku ssh-keys:add mylocal","title":"Access denied when pushing from local"},{"location":"deployment/#docker-options-not-set-building-wrong-dockerfile","text":"Check the docker-options. dokku docker-options:report salon-booking-guru-front-end If you need to reset them: take a copy of all existing settings dokku docker-options:report salon-booking-guru-front-end Clear the options dokku docker-options:clear Add the settings back you want for each stage e.g. dokku docker-options:add salon-booking-guru-front-end deploy --restart=on-failure:10 If you get the following error: remote: unable to prepare context: unable to evaluate symlinks in Dockerfile path: lstat /home/dokku/salon-booking-guru/api: no such file or directory . This means that the Dockerfile is not already on the Dokku servers repository, make sure that its already there and check the pre-recieve hook so that it has the correct URL to the Dockerfile. It must start with raw.githubusercontent.com .","title":"Docker options not set / building wrong Dockerfile"},{"location":"deployment/#github-actions-setup","text":"","title":"Github Actions setup"},{"location":"deployment/#credentials","text":"The Github Dokku action needs to be able to ssh into the Dokku server. On the dokku server, generate a keypaid for Github to use; su dokku ssh-keygen # Press enter, generate key without passphrase Allow the key to be used by Github cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys Copy the private key to Gituub secrets e.g. https://github.com/<org>/<repo>/settings/secrets/actions as SSH_PRIVATE_KEY . cat ~/.ssh/id_rsa # Copy into GitHub secrets as SSH_PRIVATE_KEY Also set DOKKU_HOST to the ip address or hostname of your dokku server.","title":"Credentials"},{"location":"deployment/#hardening","text":"","title":"Hardening"},{"location":"deployment/#disable-password-based-authentication","text":"Verify your ssh access working with key based access ( ssh root@<your-ip> ) # login without a password Disable ssh password based authentication Open /etc/ssh/sshd_config Change the line #PasswordAuthentication yes to PasswordAuthentication no","title":"Disable Password based authentication"}]}